grammar python;

scanner PythonScanner package org.ah.python.grammar {

    "del"; "pass"; "continue"; "break"; "return";
    "raise"; "from"; "global"; "nonlocal";
    "assert"; "if"; "elif"; "else"; "for"; "while"; "def";
    "yield";
    "class";
    "None" ; "True" ; "False";
    "in"; "is"; "as"; "with"; "except"; "lambda";

    "not"; "and"; "or";
  
    "try"; "finally"; "import";

    "+="; "-="; "*="; "/="; "%="; "&="; "|="; "^="; "<<="; ">>="; "**="; "//=";

    COMMA = ',';
    DASH_GT = "->";

    LPAREN = '(';
    RPAREN = ')';
    LBRACK = '[';
    RBRACK = ']';
    LKBRACK = '{';
    RKBRACK = '}';

    COLON = ':';
    EQ = '=';
    STAR = '*';
    STARSTAR = "**";
    SEMICOLON = ';';
    DOT = '.';
    ELLIPSIS = "...";
    AT = '@';
    EQUAL = "==";
    NOT_EQUAL = "!=";
    NOT_EQUAL2 = "<>";
  
    GE = ">=";
    GT = '>';
    LE = "<=";
    LT = '<';
    OR = '|';
    XOR = '^';
    AND = '&';
    LSHIFT = "<<";
    RSHIFT = ">>";
    PLUS = '+';
    MINUS = '-';
    MOD = '%';
    SLASH = '/';
    SLASHSLASH = "//";
    TILDA = '~';
 

    private digit = '0' .. '9';
    private letter = 'A' .. 'Z' | 'a' .. 'z' | '_';

    private allbuteolandnl = CHR(1) .. CHR(9) | CHR(11) .. CHR(127);

    NEWLINE = ['\\'] [CHR(13)] CHR(10);

    COMMENTS = '#' { allbuteolandnl } NEWLINE ;
    
    private whitespaceChars = CHR(1) .. CHR(9) | CHR(11) .. CHR(31) | " " ;
    WHITESPACE  =  whitespaceChars { whitespaceChars };

    NAME = letter { letter | digit }
       <%
          return new TokenImpl(s, TOKEN_NAME, startLine, startPos);
       %>;

    NUMBER = digit { digit } [ '.' { digit } ];

    private char1  = ' ' | CHR(33) | '\\' CHR(34) | CHR(35) .. CHR(91) | '\\' '\\' | CHR(93) .. CHR(127) ;
    private char2  = ' ' | CHR(33) .. CHR(38) | '\\' CHR(39) | CHR(40) .. CHR(91) | '\\' '\\' | CHR(93) .. CHR(127) ;

    STRING = ( '"' { char1 } '"' ) | ( CHR(39) { char2 } CHR(39) )
      <% 
          StringBuilder buf = new StringBuilder();
          for (int i = 0; i < s.length(); i++) {
              char c = s.charAt(i);
              if (c == '\\') {
                  i++;
                  c = s.charAt(i + 1);
              }
              buf.append(c);
          }
          return new TokenImpl(buf.toString().substring(1, buf.length() - 1), TOKEN_STRING, startLine, startPos); 
      %>
      ;

    // NEWLINE_INDENT = NEWLINE ' ' { ' ' };
    // INDENT = ' ' { ' ' };
    //  DEDENT = "ALB  ";
    INDENT = "!!!";
    DEDENT = "@@@";

}

parser PythonParser package org.ah.python.grammar using scanner org.ah.python.grammar.PythonScannerFixed {

    // import "org.ah.python.modules.BuiltInFunctions";
    import "org.ah.python.interpreter.*";
    import "org.ah.python.interpreter.Module";
    import "java.util.*";

<%
    private Block currentBlock;
    private OperatorType operatorType;
    private CmpopType cmpopType;
    private ThreadContext.Executable currentObject;
    private Def.Argument currentArgument;

    private List<String> stringList = new ArrayList<String>();
    private Import currentImport;
    private List<ThreadContext.Executable> currentList;
    private String op = "__unknown__";

    private Module module;
    private boolean trailingComma = false;
    
    public Module getModule() { return module; }

    public void setModule(Module module) { this.module = module; }

    private void addStatement(Block block, ThreadContext.Executable statement) {
        block.addStatement(statement, scanner.getStartLine());
    }

    private void addStatement(ThreadContext.Executable statement) {
        currentBlock.addStatement(statement, scanner.getStartLine());
    }
%>

    single_input = (NEWLINE | simple_stmt | compound_stmt NEWLINE { NEWLINE } );

    file_input = 
        <% module = new Module("parsed"); currentBlock = module.getBlock(); %> 
                 { NEWLINE | stmt };

    existing_module_file_input = 
        <% currentBlock = module.getBlock(); %> 
                 { NEWLINE | stmt };

    eval_input = testlist { NEWLINE };

    decorator = AT dotted_name [ LPAREN [ arglist ] RPAREN ] NEWLINE
        <% throw new UnsupportedOperationException("decorator"); %>
              ;

    decorators = decorator { decorator }
        <% throw new UnsupportedOperationException("decorators"); %>
               ;
 
    decorated = decorators ( classdef | funcdef )
        <% throw new UnsupportedOperationException("decorated"); %>
              ;
    
    funcdef = "def" NAME <% String defName = t.toString(); %>
              parameters 
              <%
                 for (ThreadContext.Executable arg : currentList) {
                     if (!(arg instanceof Def.Argument)) {
                         throw new IllegalArgumentException("Expected a varibale for function def argument but got " + arg);
                     }
                 }
                 Def def = new Def(defName, currentList.toArray(new Def.Argument[currentList.size()]));
              %>
              [ DASH_GT test <% throw new UnsupportedOperationException("->"); %> ] COLON 
              <% 
                  Block savedBlock = currentBlock; currentBlock = def.getBlock();
              %>
              suite
              <% 
                  currentBlock = savedBlock; addStatement(def);
              %>
            ;

    parameters = LPAREN <% currentList = new ArrayList<ThreadContext.Executable>(); %> [ typedargslist ] RPAREN
               ;

    typedargslist = ( tfpdef <% List<ThreadContext.Executable> args = new ArrayList<ThreadContext.Executable>(); args.add(currentArgument); %>
                        [ EQ test <% throw new UnsupportedOperationException("named parameters"); %> ] 
                        { COMMA tfpdef <% args.add(currentArgument); %>
                            [ EQ test <% throw new UnsupportedOperationException("named parameters"); %> ]
                        }  
                        [ COMMA
                            [ STAR [tfpdef] 
                                { COMMA tfpdef 
                                    [EQ test]
                                }
                                [ COMMA STARSTAR tfpdef ] 
                            | STARSTAR tfpdef
                            ]
                        ]
                        <% currentList = args; %>
                  |  STAR 
                      [ tfpdef ] 
                      { COMMA tfpdef 
                          [ EQ test ] 
                      }
                      [ COMMA STARSTAR tfpdef ] 
                      <% throw new UnsupportedOperationException("star parameters"); %>
                  | STARSTAR tfpdef <% throw new UnsupportedOperationException("starstar parameters"); %>
                  );

    tfpdef = NAME <% currentArgument = new Def.Argument(t.toString(), null); %>
             [ COLON test <% throw new UnsupportedOperationException("parameter types"); %> ];

    varargslist = (vfpdef [EQ test] { COMMA vfpdef [EQ test] }
                      [ COMMA
                          [ STAR [vfpdef] 
                              { COMMA vfpdef [EQ test] } 
                              [ COMMA STARSTAR vfpdef ] 
                          | STARSTAR vfpdef
                          ]
                      ]
                  |  STAR [vfpdef] 
                      { COMMA vfpdef [EQ test] }
                      [ COMMA STARSTAR vfpdef ] 
                  | STARSTAR vfpdef
                  );

    vfpdef = NAME;

    stmt = simple_stmt | compound_stmt
         ;

    simple_stmt = small_stmt { SEMICOLON small_stmt } [SEMICOLON] NEWLINE { NEWLINE }; 

    small_stmt = ( expr_stmt 
                 | del_stmt
                 | pass_stmt <% currentList.add(new PythonPass()); %>
                 | flow_stmt 
                 | import_stmt 
                 | global_stmt 
                 | nonlocal_stmt  <% throw new UnsupportedOperationException("nonlocal_stmt"); %>
                 | assert_stmt    <% throw new UnsupportedOperationException("assert_stmt"); %>
                 );

    expr_stmt = testlist_star_expr <% List<ThreadContext.Executable> targets = currentList; %>
                ( augassign
                    ( yield_expr <% throw new UnsupportedOperationException("yield_expr"); %>
                    | testlist
                         <%
                            ThreadContext.Executable left;
                            if (targets.size() > 1) {
                                ThreadContext.Executable tuple = new PythonListGenerator(targets, PythonTuple.PYTHON_TUPLE_CLASS);
                                left = tuple;
                            } else {
                                left = targets.get(0);
                            }

                            if (currentList.size() == 1) {
                                currentObject = currentList.get(0);
                            } else {
                                ThreadContext.Executable tuple = new PythonListGenerator(currentList, PythonTuple.PYTHON_TUPLE_CLASS);
                                currentObject = tuple; 
                            }
                            currentList.clear();

                            AssignInPlace assignInPlace = new AssignInPlace(left, currentObject, op);
                            addStatement(assignInPlace);
                         %>
                    )
                |   <%
                         if (targets.size() > 1) {
                             ThreadContext.Executable tuple = new PythonListGenerator(targets, PythonTuple.PYTHON_TUPLE_CLASS);
                             targets.clear();
                             targets.add(tuple);
                         }
                    %>
                    { EQ 
                        ( yield_expr <% throw new UnsupportedOperationException("yield_expr"); %>
                        | testlist_star_expr
                        <%
                            if (currentList.size() == 1) {
                                targets.add(currentList.get(0));
                            } else {
                                ThreadContext.Executable tuple = new PythonListGenerator(currentList, PythonTuple.PYTHON_TUPLE_CLASS);
                                targets.add(tuple);
                            }
                            currentList.clear();
                        %>
                        )
                    }
                    <%
                        while (targets.size() > 1) {
                            PythonObject assign = Assign.createAssignment(targets.get(targets.size() - 2), targets.get(targets.size() - 1), false);
                            targets.remove(targets.size() - 1);
                            targets.remove(targets.size() - 1);
                            targets.add(assign);
                        }
                        ThreadContext.Executable lastTarget = targets.get(0);
                        if (lastTarget instanceof Assign) {
	                        ((Assign)lastTarget).setLastInstruction(true);
	                    }
                        addStatement(lastTarget);
                    %>
                )
                ;

    testlist_star_expr = ( test
                         | star_expr <% throw new UnsupportedOperationException("star_expr"); %>
                         )
                         <% List<ThreadContext.Executable> args = new ArrayList<ThreadContext.Executable>(); args.add(currentObject); %> 
                         { COMMA 
                             [ test <% args.add(currentObject); %>
                             | star_expr <% throw new UnsupportedOperationException("star_expr"); %>
                             ]
                         }
                         <% currentList = args; %>
                         ;

    augassign = 
                ( "+="  <% op = "__iadd__"; %>
                | "-="  <% op = "__isub__"; %>
                | "*="  <% op = "__imul__"; %>
                | "/="  <% op = "__itruediv__"; %>
                | "%="  <% op = "__imod__"; %>
                | "&="  <% op = "__iand__"; %>
                | "|="  <% op = "__ior__"; %>
                | "^="  <% op = "__ixor__"; %>
                | "<<=" <% op = "__ilshift__"; %>
                | ">>=" <% op = "__irshift__"; %>
                | "**=" <% op = "__ipow__"; %>
                | "//=" <% op = "__ifloordiv__"; %>
                );

    // For normal assignments, additional restrictions enforced by the interpreter
    del_stmt = "del" exprlist 
                <%
                    currentObject = Del.createDel(currentList);
                    addStatement(currentObject);
                %>  
             ;

    pass_stmt = "pass";

    flow_stmt = break_stmt 
              | continue_stmt 
              | return_stmt 
              | raise_stmt 
              | yield_stmt;

    break_stmt = "break" <% addStatement(new Break()); %>;

    continue_stmt = "continue" <% addStatement(new Continue()); %>;

    return_stmt = "return" <% currentObject = PythonNone.NONE; %> [ testlist ] <% addStatement(new Return(currentObject)); %>;

    yield_stmt = yield_expr <% throw new UnsupportedOperationException("yield_stmt"); %>;

    raise_stmt = "raise" [ test [ "from" test ] ] <% throw new UnsupportedOperationException("raise_stmt"); %>;

    import_stmt =
                <% currentImport = new Import(); %>
                ( import_name 
                | import_from <% throw new UnsupportedOperationException("import_from"); %>
                )
                <% addStatement(currentImport); %>
                ;

    import_name = "import" dotted_as_names;

    // note below: the (DOT | ELLIPSIS) is necessary because ELLIPSIS is tokenized as ELLIPSIS
    import_from = ("from" ({DOT | ELLIPSIS} dotted_name | (DOT | ELLIPSIS) { (DOT | ELLIPSIS) } )
              "import" (STAR | LPAREN import_as_names RPAREN | import_as_names));

    import_as_name = NAME ["as" NAME];

    dotted_as_name = dotted_name <% String as = null; %> 
                     ["as" NAME <% as = t.toString(); %>]
                     <% currentImport.addImport(as, stringList); %>
                    ;

    import_as_names = import_as_name { COMMA import_as_name };

    dotted_as_names = dotted_as_name { COMMA dotted_as_name };

    dotted_name = NAME <% stringList = new ArrayList<String>(); stringList.add(t.toString()); %>  { DOT NAME <% stringList.add(t.toString()); %> };

    global_stmt = "global" NAME <% stringList = new ArrayList<String>(); stringList.add(t.toString()); %> { COMMA NAME <% stringList.add(t.toString()); %> }
                <% addStatement(new Global(stringList)); %>
                ;

    nonlocal_stmt = "nonlocal" NAME { COMMA NAME };

    assert_stmt = "assert" test [ COMMA test ];

    compound_stmt = if_stmt 
                  | while_stmt 
                  | for_stmt 
                  | try_stmt  <% throw new UnsupportedOperationException("try_stmt"); %>
                  | with_stmt <% throw new UnsupportedOperationException("with_stmt"); %>
                  | funcdef 
                  | classdef
                  | decorated <% throw new UnsupportedOperationException("decorated"); %>
                  ;

    if_stmt = "if" test COLON 
                   <%
                      If iff = new If(currentObject);
                      If originalIf = iff;
                      Block savedBlock = currentBlock; currentBlock = iff.getBlock();
                   %>
               suite 
             { "elif" test COLON
                   <% 
                      If elif = new If(currentObject);
                      addStatement(iff.getElseBlock(), elif);
                      iff = elif;
                      currentBlock = elif.getBlock();
                   %>
               suite 
             } 
             [ "else" COLON 
                   <% currentBlock = iff.getElseBlock(); %>
               suite 
             ]
                   <%
                       currentBlock = savedBlock;
                       addStatement(originalIf);
                   %>
             ;

    while_stmt = "while" test COLON 
                   <%
                      While whle = new While(currentObject);
                      Block savedBlock = currentBlock; currentBlock = whle.getBlock();
                   %>
                  suite 
               [ "else" COLON 
                   <% currentBlock = whle.getElseBlock(); %>
                 suite 
               ]
                   <% currentBlock = savedBlock; addStatement(whle); %>
               ;

    for_stmt = "for" exprlist <% ThreadContext.Executable target = currentObject; %>
               "in" testlist COLON 
                   <%
                      if (!(target instanceof Reference)) {
                          throw new UnsupportedOperationException("Illegal left side of assignment; " + target);
                      }
                      For fr = new For((Reference)target, currentObject);
                      Block savedBlock = currentBlock; currentBlock = fr.getBlock();
                   %>
                  suite 
                [ "else" COLON 
                   <% currentBlock = fr.getElseBlock(); %>
                  suite 
                ]
                   <% currentBlock = savedBlock; addStatement(fr); %>
                ;

    try_stmt = ("try" COLON suite
           ((except_clause COLON suite) { (except_clause COLON suite) }
        ["else" COLON suite]
        ["finally" COLON suite] |
       "finally" COLON suite));

    with_stmt = "with" with_item {COMMA with_item}  COLON suite;

    with_item = test ["as" expr];

    // NB compile.c makes sure that the default except clause is last
    except_clause = "except" [test ["as" NAME]];

    suite = simple_stmt 
          | NEWLINE { NEWLINE }
               INDENT stmt 
                   { 
                       stmt
                   } 
               DEDENT
          ;

    test = (or_test
               [ 
                   "if" <% ThreadContext.Executable ifExpression = currentObject; %> 
                   or_test <% ThreadContext.Executable condition = currentObject; %>
                   "else"
                   test <% currentObject = new TernaryOperator(condition, ifExpression, currentObject); %> 
               ]
           | lambdef <% throw new UnsupportedOperationException("lambdef"); %>
           );

    test_nocond = or_test | lambdef_nocond;

    lambdef = "lambda" [varargslist] COLON test;
    
    lambdef_nocond = "lambda" [varargslist] COLON test_nocond;

    or_test = and_test        <% ThreadContext.Executable left = currentObject; %>
            { "or" and_test   <% currentObject = new LogicalOr(left, currentObject); %>
            }
            ;

    and_test = not_test       <% ThreadContext.Executable left = currentObject; %>
             { "and" not_test <% currentObject = new LogicalAnd(left, currentObject); %>
             }
             ;

    not_test = "not" not_test <% currentObject = new LogicalNot(currentObject); %>
             | comparison
             ;

    comparison = star_expr 
                   <%
                       ThreadContext.Executable left = currentObject;
                   %>
               { comp_op star_expr 
                         <% 
                            if (op.equals("isnot")) {
                                throw new UnsupportedOperationException("'is not' is not implemented");
                            } else if (op.equals("is")) {
                                throw new UnsupportedOperationException("'is' is not implemented");
                            } else if (op.equals("notin")) {
                                currentObject = new Call(
                                    new Reference(
                                        new Call(new Reference(left, "__contains__"), currentObject),
                                        "__not__"
                                    )
                                );
                                left = currentObject;
                            } else {
                                currentObject = new Call(new Reference(left, op), currentObject);
                                left = currentObject;
                            }
                         %>
               }
               ;

    comp_op = 
              LT         <% op = "__lt__"; %>
            | GT         <% op = "__gt__"; %>
            | EQUAL      <% op = "__eq__"; %>
            | GE         <% op = "__ge__"; %>
            | LE         <% op = "__le__"; %>
            | NOT_EQUAL2 <% op = "__ne__"; %>
            | NOT_EQUAL  <% op = "__ne__"; %>
            | "in"       <% op = "__contains__"; %>
            | "not"      <% op = "notin"; %>
            | "is"       <% op = "is"; %>
            | "is" "not" <% op = "isnot"; %>
            ;

    star_expr = [STAR <% throw new UnsupportedOperationException("star_expr"); %> ] expr;

    expr = xor_expr <% ThreadContext.Executable left = currentObject; %>
         { OR xor_expr <% currentObject = new Call(new Reference(left, "__or__"), currentObject); left = currentObject; %>
         }
         ;

    xor_expr = and_expr <% ThreadContext.Executable left = currentObject; %>
             { XOR and_expr <% currentObject = new Call(new Reference(left, "__xor__"), currentObject); left = currentObject; %>
             }
             ;

    and_expr = shift_expr <% ThreadContext.Executable left = currentObject; %>
             { AND shift_expr <% currentObject = new Call(new Reference(left, "__and__"), currentObject); left = currentObject; %>
             }
             ;

    shift_expr = arith_expr <% ThreadContext.Executable left = currentObject; %>
               { <% String op; %>
                   ( LSHIFT <% op = "__lshift__"; %>
                   | RSHIFT <% op = "__rshift__"; %>
                   ) 
                   arith_expr <% currentObject = new Call(new Reference(currentObject, op), currentObject); left = currentObject; %>
               };

    arith_expr = term <% ThreadContext.Executable left = currentObject; %>
               { <% String op; %>
                   ( PLUS  <% op = "__add__"; %>
                   | MINUS <% op = "__sub__"; %>
                   ) 
                   term <% currentObject = new Call(new Reference(left, op), currentObject); left = currentObject; %>
               };

    term = factor <% ThreadContext.Executable left = currentObject; %>
         {  <% String op; %>
             ( STAR       <% op = "__mul__"; %>
             | SLASH      <% op = "__truediv__"; %>
             | MOD        <% op = "__mod__"; %>
             | SLASHSLASH <% op = "__floordiv__"; %>
             ) 
             factor <% currentObject = new Call(new Reference(left, op), currentObject); left = currentObject; %>
         };

    factor = <% String op; %>
               ( PLUS  <% op = "__pos__"; %>
               | MINUS <% op = "__neg__"; %>
               | TILDA <% op = "__invert__"; %>
               ) 
               factor <% currentObject = new Call(new Reference(currentObject, op), currentObject); %>
           | 
           power;

    power = atom <% ThreadContext.Executable atom = currentObject; %>
            { LPAREN   <% currentList = new ArrayList<ThreadContext.Executable>(); // since arglist is optional - to ensure empty list! %> 
              [ arglist ] 
              RPAREN   <% currentObject = new Call(atom, currentList.toArray(new ThreadContext.Executable[currentList.size()])); atom = currentObject; %>
            | LBRACK 
              subscriptlist 
              RBRACK   <% atom = currentObject; %>
            | DOT NAME <% currentObject = new Reference(atom, PythonString.valueOf(t.toString())); atom = currentObject; %>
            }
            <% ThreadContext.Executable left = currentObject; %>
            [ STARSTAR factor <% currentObject = new Call(new Reference(left, "__pow__"), currentObject); left = currentObject; %>
            ]
          ;

    atom = ( <% scanner.pushNotInStatement(); %> LPAREN 
                 [ yield_expr <% throw new UnsupportedOperationException("yield_expr"); %>
                 | <% trailingComma = false; %> testlist_comp 
                   <% 
                      if (trailingComma || currentList.size() > 1) {
                          currentObject = new PythonListGenerator(currentList, PythonTuple.PYTHON_TUPLE_CLASS);
                      } else {
                          currentObject = currentList.get(0);
                      }
                   %>
                 ] 
             <% scanner.popNotInStatement(); %>  RPAREN 
           | <% scanner.pushNotInStatement(); %>
             LBRACK
             <% currentList = new ArrayList<ThreadContext.Executable>(); // just in case we don't get to testlist_comp %>
                 [ testlist_comp ] 
             <% 
                currentObject = new PythonListGenerator(currentList,  PythonList.PYTHON_LIST_CLASS);
                scanner.popNotInStatement(); 
             %>
             RBRACK
           | <% scanner.pushNotInStatement(); %>
             LKBRACK
                 <% Map<ThreadContext.Executable, ThreadContext.Executable> map = new LinkedHashMap<ThreadContext.Executable, ThreadContext.Executable>(); %>
                 [ test <% ThreadContext.Executable key = currentObject; ThreadContext.Executable value = null; %>
                     [ COLON test <% value = currentObject; %> ]
                     <% map.put(key, value); %> 
                     ( comp_for <% throw new UnsupportedOperationException("comp_for"); %>
                     | 
                         { COMMA 
                             [ test <% key = currentObject; value = null; %>
                                 [ COLON test <% value = currentObject; %> ]
                             ]
                     <% map.put(key, value); %> 
                         }
                     ) 
                 ] 
                 
             <%
               currentObject = new PythonDictGenerator(map);
               scanner.popNotInStatement();
             %>  
             RKBRACK
           | NAME 
             <%
		        String id = t.toString();
		        
		        if ("True".equals(id)) {
		            currentObject = PythonBoolean.TRUE;
		        } else if ("False".equals(id)) {
		            currentObject = PythonBoolean.FALSE;
		        } else if ("None".equals(id)) {
		            currentObject = PythonNone.NONE;
		        //} else if (BuiltInFunctions.isBuiltInFunction(id)) {
		        //    currentObject = BuiltInFunctions.getFunction(id);
		        } else {
                    currentObject = new Reference(null, PythonString.valueOf(id));
                }
             %>
           
           | NUMBER 
             <%
               String n = t.toString();
               if (n.indexOf('.') > 0) {
                   currentObject = PythonFloat.valueOf(n);
               } else {
                   currentObject = PythonInteger.valueOf(n);
               }
             %>
           | STRING <% currentObject = PythonString.valueOf(t.toString()); %>
               { STRING <% currentObject = PythonString.valueOf(((PythonString)currentObject).asString() + t.toString()); %>
               } 
           | ELLIPSIS 
             <% throw new UnsupportedOperationException("ELLIPSIS"); %>
           | "None" 
		     <% currentObject = PythonNone.NONE; %>
           | "True" 
		     <% currentObject = PythonBoolean.TRUE; %>
           | "False"
		     <% currentObject = PythonBoolean.FALSE; %>
           );

    testlist_comp = ( test 
                    | star_expr         <% throw new UnsupportedOperationException("star_expr"); %>
                    )
                    <% List<ThreadContext.Executable> args = new ArrayList<ThreadContext.Executable>(); args.add(currentObject); %>
                    ( comp_for          <% throw new UnsupportedOperationException("comp_for"); %>
                    | 
                        { COMMA <% trailingComma = true; %>
                            [ test      <% args.add(currentObject); %>
                            | star_expr <% throw new UnsupportedOperationException("star_expr"); %>
                            ] 
                        }
                    )
                    <% currentList = args; %>
                    ;

    subscriptlist = subscript 
                  { COMMA 
                      [ subscript 
                      ]
                  } 
                  ;

    subscript = <% ThreadContext.Executable target = currentObject; %> 
              ( test 
                  <% 
                      currentObject = new Call(new Reference(target, "__getitem__"), currentObject);
                  %>
              | <% 
                   ThreadContext.Executable from = null;
                   ThreadContext.Executable to = null;
                   ThreadContext.Executable stride = null;
                %>
                  [ test <% from = currentObject; currentObject = null; %> ] 
                  COLON 
                  [ test <% to = currentObject; currentObject = null; %> ] 
                  [ sliceop <% stride = currentObject; %> ] 
                  <%
                      // currentObject = new Subscript(target, from, to, stride);
                      currentObject = new Call(new Reference(target, "__getitem__"), new PythonSlice(from, to, stride));
                  %>
              )
              ;

    sliceop = COLON [test] <% throw new UnsupportedOperationException("subscript slice"); %>;

    exprlist = ( expr 
               | star_expr <% throw new UnsupportedOperationException("star_expr"); %>
               ) <% List<ThreadContext.Executable> args = new ArrayList<ThreadContext.Executable>(); args.add(currentObject); %>
               { COMMA
                 [ expr <% args.add(currentObject); %>
                    | star_expr <% throw new UnsupportedOperationException("star_expr"); %> ] 
               }
               <% currentList = args; %>
               ;

    testlist = test <% List<ThreadContext.Executable> args = new ArrayList<ThreadContext.Executable>(); args.add(currentObject); %>
              { COMMA
                  [ test <% args.add(currentObject); %> 
                  ] 
              }
              <% currentList = args; %>
              ;

    classdef = "class" NAME <% String className = t.toString(); ThreadContext.Executable[] parents = null; %>
              [ LPAREN <% currentList = new ArrayList<ThreadContext.Executable>(); %>
                  [ arglist ]
                RPAREN 
                  <%
                      parents = currentList.toArray(new ThreadContext.Executable[currentList.size()]);
                  %>
              ] 
              COLON 
              <% 
                   PythonClassDef cls = new PythonClassDef(className, parents);
                   Block savedBlock = currentBlock; currentBlock = cls.getBlock();
              %>
              suite
              <% currentBlock = savedBlock; addStatement(cls); %>
              ;

    arglist = 
            ( <% List<ThreadContext.Executable> args = new ArrayList<ThreadContext.Executable>(); %>
              argument           <% args.add(currentObject); %>
                { COMMA argument <% args.add(currentObject); %>
                } 
                [ STAR test { COMMA argument } [ COMMA STARSTAR test ] <% throw new UnsupportedOperationException("star arguments"); %>
                | STARSTAR test                                        <% throw new UnsupportedOperationException("star star arguments"); %>
                ]
                <% currentList = args; %>
            | STAR test { COMMA argument } [ COMMA STARSTAR test ] <% throw new UnsupportedOperationException("star arguments"); %>
            | STARSTAR test                                        <% throw new UnsupportedOperationException("star star arguments"); %>
            );

    // The reason that keywords are test nodes instead of NAME is that using NAME
    // results in an ambiguity. ast.c makes sure it's a NAME.
    argument =  
             ( test
                 [ comp_for <% throw new UnsupportedOperationException("argument for comprehensions"); %>
                 ] 
             | test EQ test <% throw new UnsupportedOperationException("named arguments"); %>
             );   // Really [keyword EQ] test;

    comp_iter = comp_for 
              | comp_if;

    comp_for = "for" exprlist "in" or_test [comp_iter];

    comp_if = "if" test_nocond [comp_iter];

    testlist1 = test { COMMA test };

    // not used in grammar, but may appear in "node" passed from Parser to Compiler
    encoding_decl = NAME;

    yield_expr = "yield" [ yield_arg ];

    yield_arg = "from" test | testlist;

}